<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.7.8</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <groupId>com.nanshan</groupId>
    <artifactId>SpringBoot-Nginx-ReverseProxy</artifactId>
    <version>v1</version>
    <!-- <packaging>war</packaging> -->
    <name>SpringBoot-Nginx-ReverseProxy</name>
    <description>SpringBoot-Nginx-ReverseProxy</description>

    <!-- 打包成 war，才可成功在打包成容器後 forward JSP -->
    <!-- Dockerfile 也要調整 -->
    <packaging>jar</packaging>
    <!-- <packaging>war</packaging> -->

    <properties>
        <java.version>11</java.version>
        <maven.compiler.version>3.8.1</maven.compiler.version>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
        <docker.registry.name>sobadrush</docker.registry.name>
    </properties>

    <dependencies>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <!-- <exclusions> -->
            <!--     &lt;!&ndash; 這裡是擺脫 embed Tomcat 的關鍵 &ndash;&gt; -->
            <!--     <exclusion> -->
            <!--         <groupId>org.springframework.boot</groupId> -->
            <!--         <artifactId>spring-boot-starter-tomcat</artifactId> -->
            <!--     </exclusion> -->
            <!-- </exclusions> -->
        </dependency>

        <!-- Spring Actuator 監控 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <!-- micrometer-registry-prometheus -->
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-registry-prometheus</artifactId>
            <version>1.11.1</version>
        </dependency>

        <!-- 將tomcat的scope的作用域設置為provided，這個地方和上面說的那個exclusion裡面其實選其一就行 -->
        <!-- <dependency> -->
        <!--     <groupId>org.springframework.boot</groupId> -->
        <!--     <artifactId>spring-boot-starter-tomcat</artifactId> -->
        <!--     <scope>provided</scope> -->
        <!-- </dependency> -->

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>

        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
        </dependency>

        <!-- For SpringBoot Using JSP -->
        <dependency>
            <groupId>org.apache.tomcat.embed</groupId>
            <artifactId>tomcat-embed-jasper</artifactId>
            <!--  ref. https://liba.ro/5z93pwlvq -->
            <scope>provided</scope>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.h2database/h2 -->
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <version>1.4.193</version>
            <scope>runtime</scope>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.apache.commons/commons-lang3 -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.12.0</version>
        </dependency>

    </dependencies>

    <build>
        <finalName>${artifactId}</finalName>

        <!-- Maven filtering -->
        <!-- 開啟過濾器功能，開啟之後就可以從 <properties> 元素或者下面 <filters> 中指定的 properties 文件中讀取變量的值替換 ${變量名} -->
        <!-- 注意：SpringBoot 要使用 @變量名@ 這種格式才可以成功替換 -->
        <filters>
            <filter>src/main/resources/my-filter-values.properties</filter>
        </filters>
        <resources>
            <resource>
                <directory>src/main/resources/</directory>
                <filtering>false</filtering>
            </resource>
            <resource>
                <directory>src/main/webapp/WEB-INF/</directory>
                <filtering>true</filtering>
                <includes>
                    <include>web.xml</include>
                </includes>
                <targetPath>WEB-INF</targetPath><!-- 將 web.xml filtering 後，打包到 war 中的 WEB-INF/ 下 -->
            </resource>
        </resources>

        <plugins>

            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.project-lombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven.compiler.version}</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                </configuration>
            </plugin>

            <!-- <plugin> -->
            <!-- ref. https://www.itmuch.com/docker/12-docker-maven/ -->
            <!-- ref. https://blog.csdn.net/twingao/article/details/105157935 -->
            <!--     <groupId>com.spotify</groupId> -->
            <!--     <artifactId>docker-maven-plugin</artifactId> -->
            <!--     <version>0.4.13</version> -->
            <!--     <configuration> -->
            <!--         <imageName>${docker.registry.name}/springboot-nginx:${project.version}</imageName> -->
            <!--         <dockerDirectory>${project.basedir}/src/main/docker</dockerDirectory> -->
            <!--         <resources> -->
            <!--             <resource> -->
            <!--                 <targetPath>/</targetPath> -->
            <!--                 <directory>${project.build.directory}</directory> -->
            <!--                 <include>${project.build.finalName}.jar</include> -->
            <!--             </resource> -->
            <!--         </resources> -->
            <!--     </configuration> -->
            <!-- </plugin> -->

            <!-- <plugin> -->
            <!--     &lt;!&ndash; ref. https://blog.csdn.net/qq_34250494/article/details/120493447 &ndash;&gt; -->
            <!--     &lt;!&ndash; ref. https://dmp.fabric8.io/ &ndash;&gt; -->
            <!--     <groupId>io.fabric8</groupId> -->
            <!--     <artifactId>docker-maven-plugin</artifactId> -->
            <!--     <version>0.43.0</version> -->
            <!--     <configuration> -->
            <!--         <dockerHost>tcp://192.168.65.0:24</dockerHost> -->
            <!--         <verbose>true</verbose> -->
            <!--         <images> -->
            <!--             <image> -->
            <!--                 &lt;!&ndash; 指定 image 名稱(包含 registry 名稱)&ndash;&gt; -->
            <!--                 <name>${docker.registry.name}/springboot-nginx:${project.version}</name> -->
            <!--                 &lt;!&ndash; 別名為 master，不太重要&ndash;&gt; -->
            <!--                 <alias>master</alias> -->
            <!--                 <build> -->
            <!--                     &lt;!&ndash; 指定 dockerfile 文件的位置&ndash;&gt; -->
            <!--                     <dockerFile>${project.basedir}/src/main/docker/Dockerfile</dockerFile> -->
            <!--                     <buildOptions> -->
            <!--                         &lt;!&ndash; 網路配置，使用Host機相同網路設定&ndash;&gt; -->
            <!--                         <network>host</network> -->
            <!--                     </buildOptions> -->
            <!--                 </build> -->
            <!--             </image> -->
            <!--             &lt;!&ndash; 可生成多個 image &ndash;&gt; -->
            <!--             &lt;!&ndash; <image> &ndash;&gt; -->
            <!--             &lt;!&ndash;     ... &ndash;&gt; -->
            <!--             &lt;!&ndash; </image> &ndash;&gt; -->
            <!--         </images> -->
            <!--         &lt;!&ndash; <authConfig> &ndash;&gt; -->
            <!--         &lt;!&ndash;     &lt;!&ndash; registry 服務登入資訊 &ndash;&gt; &ndash;&gt; -->
            <!--         &lt;!&ndash;     <username>sobadrush</username> &ndash;&gt; -->
            <!--         &lt;!&ndash;     <password>kelly180448</password> &ndash;&gt; -->
            <!--         &lt;!&ndash; </authConfig> &ndash;&gt; -->
            <!--     </configuration> -->
            <!--     <executions> -->
            <!--         <execution> -->
            <!--             <id>docker-exec</id> -->
            <!--             &lt;!&ndash; 绑定 mvn package 階段，當執行 mvn package 時， &ndash;&gt; -->
            <!--             &lt;!&ndash; 就會執行 docker build (和 docker push) &ndash;&gt; -->
            <!--             <phase>package</phase> -->
            <!--             <goals> -->
            <!--                 <goal>build</goal> -->
            <!--                 &lt;!&ndash; <goal>push</goal> &ndash;&gt; -->
            <!--             </goals> -->
            <!--         </execution> -->
            <!--     </executions> -->
            <!-- </plugin> -->

        </plugins>
    </build>

</project>
